const UserModel = require('../modules/UserModel');
const slugify = require('slugify');
const asyncHandler = require('express-async-handler');
const jwt = require('jsonwebtoken');
const multer = require('multer');
const bcrypt = require('bcrypt');
const User = require('../modules/UserModel');
const mongoose = require('mongoose');


exports.registerUser = async (req, res) => {
    try {
        const { username, email, password, phone, governorate, city } = req.body;
        const existingUser = await User.findOne({ email });

        if (existingUser) {
            return res.status(400).json({ message: 'Email already registered!' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const newUser = new User({
            username,
            email,
            password: hashedPassword,
            phone,
            location: {
                governorate,
                city
            }
        });

        // Generate token
        const token = jwt.sign({ userId: newUser._id }, 'your_secret_key'); // Replace 'your_secret_key' with your actual secret key

        // Save token to user document
        newUser.token = token;
        await newUser.save();

        res.status(201).json({ message: 'Registered successfully!', token });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

exports.loginUser = async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });

        if (!user) {
            return res.status(400).json({ message: 'Email not found!' });
        }

        const passwordMatch = await bcrypt.compare(password, user.password);

        if (passwordMatch) {
            // You may generate a JWT token here for authentication
            res.status(200).json({ message: 'Logged in successfully!' });
        } else {
            res.status(400).json({ message: 'Incorrect password!' });
        }
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};


//upload user photo after registration
//Upload User Photo
const storagee = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploadsUsers/'); // Save the uploaded files to the 'uploads' directory
    },
    filename: function (req, file, cb) {
        cb(null, file.fieldname + '-' + Date.now() + '.' + file.originalname.split('.').pop());
    }
  });
  const uploadsUsers = multer({ storage: storagee });
  
  exports.UploadUserPhoto = asyncHandler(async (req, res) => {
    uploadsUsers.single('image')(req, res, async (err) => {
      if (err) {
        console.log(err);
        return res.status(400).json({ success: false, message: "Error uploading image" });
      }
  
      // Extract token from request headers
      const token = req.headers.token;
  
      // Check if token exists
      if (!token) {
        return res.status(401).json({ success: false, message: 'Unauthorized: No token provided' });
      }
  
      try {
        // Verify token
        const decoded = jwt.verify(token, 'your_secret_key');
        const userId = decoded.userId;
  
        const user = await User.findById(userId);
        if (!user) {
          return res.status(404).json({ success: false, msg: `No user found for this id ${userId}` });
        }else{
  
        // Update user's photo
        user.image = req.file ? req.file.path : null;
        await user.save();
  
        res.status(200).json({ success: true, data: user });
    }
      } catch (error) {
        console.log(error);
        res.status(500).json({ success: false, message: 'Internal Server Error' });
      }
    });
  });
  

  


  //update user information ONLY

exports.updateUserInfo = asyncHandler(async (req, res) => {
    const token = req.headers.token;
    const { username, email, password, phone, city, governorate } = req.body;

    // Check if token exists
    if (!token) {
        return res.status(401).json({success: false, msg: 'Unauthorized: No token provided' });
    }

    try {
        // Verify token
        const decoded = jwt.verify(token, 'your_secret_key');
        const userId = decoded.userId;


            // Update the user
            const updatedUser = await UserModel.findByIdAndUpdate(
                userId,
                {
                    username,
                    email,
                    password,
                    phone,
                    location: { governorate, city },
                    
                },
                { new: true }
            );

            if (!updatedUser) {
                return res.status(500).json({success: false, msg: 'Failed to update user' });
            }
            else {
                res.status(200).json({ success: true, data: updatedUser });
            }
        
    } catch (error) {
        console.error(error);
        return res.status(500).json({ success: false, msg: 'Internal Server Error' });
    }
});

//UPDATE USER PHOTO
const str = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploadsUsers/'); // Save the uploaded files to the 'uploads' directory
    },
    filename: function (req, file, cb) {
        cb(null, file.fieldname + '-' + Date.now() + '.' + file.originalname.split('.').pop());
    }
});
const updateUsers = multer({ storage: str });

exports.UpdateUserPhoto = asyncHandler(async (req, res) => {
    updateUsers .single('image')(req, res, async (err) => {
        if (err) {
            console.log(err);
            return res.status(400).json({ success: false, message: "Error uploading image" });
        }

        // Extract token from request headers
        const token = req.headers.token;

        // Check if token exists
        if (!token) {
            return res.status(401).json({ success: false, message: 'Unauthorized: No token provided' });
        }

        try {
            // Verify token
            const decoded = jwt.verify(token, 'your_secret_key');
            const userId = decoded.userId;

            const user = await User.findById(userId);
            if (!user) {
                return res.status(404).json({ success: false, msg: `No user found for this id ${userId}` });
            }

            // Update user's photo
            user.image = req.file ? req.file.path : user.image; // If req.file is provided, update the image path; otherwise, keep the existing image path
            await user.save();

            res.status(200).json({ success: true, data: user });
        } catch (error) {
            console.log(error);
            res.status(500).json({ success: false, message: 'Internal Server Error' });
        }
    });
});
