const UserModel = require('../modules/UserModel');
const ItemModel = require('../modules/ItemModel');
const slugify = require('slugify');
const asyncHandler = require('express-async-handler');
const jwt = require('jsonwebtoken');
const multer = require('multer');
const bcrypt = require('bcrypt');
const User = require('../modules/UserModel');
const mongoose = require('mongoose');

//register


exports.registerUser = async (req, res) => {
    try {
        const { username, email, password, phone, governorate, city } = req.body;
        const existingUser = await User.findOne({ email });

        if (existingUser) {
            return res.status(400).json({ message: 'Email already registered!' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const newUser = new User({
            username,
            email,
            password: hashedPassword,
            phone,
            location: {
                governorate,
                city
            }
        });

        // Generate token
        const token = jwt.sign({ userId: newUser._id }, 'your_secret_key'); // Replace 'your_secret_key' with your actual secret key

        // Save token to user document
        newUser.token = token;
        await newUser.save();

        res.status(201).json({ message: 'Registered successfully!', token });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

//Login
exports.loginUser = async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });

        if (!user) {
            return res.status(400).json({ message: 'Email not found!' });
        }

        const passwordMatch = await bcrypt.compare(password, user.password);

        if (passwordMatch) {
            res.status(200).json({ message: 'Logged in successfully!', token: user.token });
        } else {
            res.status(400).json({ message: 'Incorrect password!' });
        }
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

//upload user photo after registration
//Upload User Photo
const storagee = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploadsUsers/'); // Save the uploaded files to the 'uploads' directory
    },
    filename: function (req, file, cb) {
        cb(null, file.fieldname + '-' + Date.now() + '.' + file.originalname.split('.').pop());
    }
  });
  const uploadsUsers = multer({ storage: storagee });
  
  exports.UploadUserPhoto = asyncHandler(async (req, res) => {
    uploadsUsers.single('image')(req, res, async (err) => {
      if (err) {
        console.log(err);
        return res.status(400).json({ success: false, message: "Error uploading image" });
      }
  
      // Extract token from request headers
      const token = req.headers.token;
  
      // Check if token exists
      if (!token) {
        return res.status(401).json({ success: false, message: 'Unauthorized: No token provided' });
      }
  
      try {
        // Verify token
        const decoded = jwt.verify(token, 'your_secret_key');
        const userId = decoded.userId;
  
        const user = await User.findById(userId);
        if (!user) {
          return res.status(404).json({ success: false, msg: `No user found for this id ${userId}` });
        }else{
  
        // Update user's photo
        const imageUrl = req.file ?` ${req.protocol}://${req.get('host')}/${req.file.path}` : null;
        user.image=imageUrl;
        await user.save();

 // Reformat the response data
 const responseData = {
   
    username: user.username,
    email: user.email,
    phone: user.phone,
    image: user.image, // Include the updated image
    role: user.role,
   
};



  
        res.status(200).json({ success: true, responseData });
    }
      } catch (error) {
        console.log(error);
        res.status(500).json({ success: false, message: 'Internal Server Error' });
      }
    });
  });
  

  


  //update user information ONLY
// Update user information (excluding password)
exports.updateUserInfo = asyncHandler(async (req, res) => {
    const token = req.headers.token;
    const { username, email, phone, city, governorate } = req.body;

    // Check if token exists
    if (!token) {
        return res.status(401).json({ success: false, msg: 'Unauthorized: No token provided' });
    }

    try {
        // Verify token
        const decoded = jwt.verify(token, 'your_secret_key');
        const userId = decoded.userId;

        // Update the user (excluding password)
        const updatedUser = await UserModel.findByIdAndUpdate(
            userId,
            {
                username,
                email,
                phone,
                location: { governorate, city },
            },
            { new: true }
        );

        if (!updatedUser) {
            return res.status(500).json({ success: false, msg: 'Failed to update user' });
        } else {
            res.status(200).json({ success: true, data: updatedUser });
        }
    } catch (error) {
        console.error(error);
        return res.status(500).json({ success: false, msg: 'Internal Server Error' });
    }
});


// Change password
exports.changePassword = asyncHandler(async (req, res) => {
    const token = req.headers.token;
    const { oldPassword, newPassword } = req.body;

    // Check if token exists
    if (!token) {
        return res.status(401).json({ success: false, msg: 'Unauthorized: No token provided' });
    }

    try {
        // Verify token
        const decoded = jwt.verify(token, 'your_secret_key');
        const userId = decoded.userId;

        // Find user by ID
        const user = await UserModel.findById(userId);

        // Check if user exists
        if (!user) {
            return res.status(404).json({ success: false, msg: 'User not found' });
        }

        // Verify old password
        const isPasswordValid = await bcrypt.compare(oldPassword, user.password);
        if (!isPasswordValid) {
            return res.status(400).json({ success: false, msg: 'Invalid old password' });
        }
        // Hash the new password
        const hashedPassword = await bcrypt.hash(newPassword, 10); // 10 is the saltRounds

        // Update password
        user.password = hashedPassword;
        await user.save();

        res.status(200).json({ success: true, msg: 'Password updated successfully' });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ success: false, msg: 'Internal Server Error' });
    }
});

//UPDATE USER PHOTO
const str = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploadsUsers/'); // Save the uploaded files to the 'uploads' directory
    },
    filename: function (req, file, cb) {
        cb(null, file.fieldname + '-' + Date.now() + '.' + file.originalname.split('.').pop());
    }
});
const updateUsers = multer({ storage: str });

exports.UpdateUserPhoto = asyncHandler(async (req, res) => {
    updateUsers .single('image')(req, res, async (err) => {
        if (err) {
            console.log(err);
            return res.status(400).json({ success: false, message: "Error uploading image" });
        }

        // Extract token from request headers
        const token = req.headers.token;

        // Check if token exists
        if (!token) {
            return res.status(401).json({ success: false, message: 'Unauthorized: No token provided' });
        }

        try {
            // Verify token
            const decoded = jwt.verify(token, 'your_secret_key');
            const userId = decoded.userId;

            const user = await User.findById(userId);
            if (!user) {
                return res.status(404).json({ success: false, msg: `No user found for this id ${userId}` });
            }

            // Update user's photo
            user.image = req.file ? req.file.path : user.image; // If req.file is provided, update the image path; otherwise, keep the existing image path
            await user.save();

            res.status(200).json({ success: true, data: user });
        } catch (error) {
            console.log(error);
            res.status(500).json({ success: false, message: 'Internal Server Error' });
        }
    });
});


//// List user information based on token
exports.listUserInfo = asyncHandler(async (req, res) => {
    const token = req.headers.token;

    // Check if token exists
    if (!token) {
        return res.status(401).json({ success: false, message: 'Unauthorized: No token provided' });
    }

    try {
        // Verify token
        const decoded = jwt.verify(token, 'your_secret_key');
        const userId = decoded.userId;

        // Fetch user information
        const userInfo = await User.findById(userId).select('username email phone location favorites image');

        if (!userInfo) {
            return res.status(404).json({ success: false, message: 'User not found' });
        }

        res.status(200).json({ success: true, data: userInfo });
    } catch (error) {
        console.error(error);
        res.status(500).json({ success: false, message: 'Internal Server Error' });
    }
});

//// List user information based on his id
exports.getUserInfoById = asyncHandler(async (req, res) => {
    try {
        const userId = req.params.userId; // Assuming userId is passed as a route parameter

        // Fetch user information
        const userInfo = await User.findById(userId).select('username email phone location favorites image');

        if (!userInfo) {
            return res.status(404).json({ success: false, message: 'User not found' });
        }

        res.status(200).json({ success: true, data: userInfo });
    } catch (error) {
        console.error(error);
        res.status(500).json({ success: false, message: 'Internal Server Error' });
    }
});

// get user items by his token

exports.getItemsbyUsertoken = asyncHandler(async (req, res) => {
    const token = req.headers.token; // Assuming the token is passed in the Authorization header
    if (!token) {
        return res.status(401).json({ msg: 'Authorization token is missing' });
    }

    try {
        const decoded = jwt.verify(token, 'your_secret_key'); // Verify and decode the token
        const userId = decoded.userId; // Extract the user ID from the decoded token

       
        const item = await ItemModel.findOne({  user: userId }); // Query the item based on user ID
        if (!item) {
            return res.status(404).json({ msg: `No item found for this id ${id}` });
        }

        res.status(200).json({ data: item });
    } catch (error) {
        return res.status(401).json({ msg: error.message });
    }
});



//This function is responsible for sending the password reset email to the user.

async function sendPasswordResetEmail(email, token) {
    const transporter = nodemailer.createTransport({
        host: process.env.Email_HOST,
        port: process.env.Email_PORT,
        auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS
        }
    });

    const mailOptions = {
        from: process.env.EMAIL_USER,
        to: email,
        subject: 'Password Reset',
        html: `<div style="font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; font-size: 16px; color: #333;">
            <h2>Password Reset Request</h2>
            <p>To reset your password, please click on the link below:</p>
            <a href="http://localhost:4000/forget-password/reset-password?token=${token}" style="color: #0066cc;">Reset Password</a>
            <p>This link will expire in 1 hour.</p>
            <p>If you did not request a password reset, please ignore this email.</p>
            </div>`,
    };

    return new Promise((resolve, reject) => {
        transporter.sendMail(mailOptions, (error, info) => {
            if (error) {
                console.error(error);
                reject('Failed to send email');
            } else {
                resolve('Email sent successfully');
            }
        });
    });
}
/*This forgetPassword function orchestrates the process of generating the reset token,
 saving it to the user document, and triggering the email sending process.*/

 exports.forgetPassword = async (req, res) => {
    const { email } = req.body;

    if (!email) {
        return res.status(400).send('An email is required');
    }

    try {
        const user = await User.findOne({ email });
        
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        // Generate token with expiry
        const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
        
        // Calculate token expiry
        const tokenExpiry = Date.now() + 3600000; // 1 hour in milliseconds
        
        // Save token and expiry to user document
        user.token = token;
        user.tokenExpiry = tokenExpiry;
        await user.save();

        await sendPasswordResetEmail(email, token);

        // Include token and tokenExpiry in the response
        res.status(200).json({ 
            message: 'Email sent successfully', 
            token,
            tokenExpiry
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'An error occurred during the operation' });
    }
};



/*function ensures that the password reset token is valid, hashes the new password,
 updates the user's password in the database,
 and sends an appropriate response to the client indicating the outcome of the password reset operation*/

 exports.resetPassword = async (req, res) => {
    const { token, newPassword } = req.body;

    try {
        const user = await User.findOne({ token });

        if (!user) {
            return res.status(401).json({ error: 'Invalid token' });
        }

        // Verify token
        jwt.verify(token, process.env.JWT_SECRET, async (err, decoded) => {
            if (err) {
                console.error("Token verification failed:", err.message);
                return res.status(401).json({ error: 'Invalid token' });
            }

            try {
                const hashedPassword = await bcrypt.hash(newPassword, 10);
                user.password = hashedPassword;

                // Generate new token without expiration
                const newToken = jwt.sign({ userId: user._id }, process.env.JWT_SECRET);

                // Update user with new token
                user.token = newToken;
                await user.save();

                res.status(200).json({ message: 'Password updated successfully', token: newToken });
            } catch (error) {
                console.error("Error updating password:", error);
                res.status(500).json({ error: 'An error occurred while updating the password' });
            }
        });
    } catch (error) {
        console.error("Error finding user:", error);
        res.status(500).json({ error: 'An error occurred while updating the password' });
    }
};